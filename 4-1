#4-1(Задача на программирование: покрыть отрезки точками)
segments = []
result_points = []
for numberOfIteration in range(int(input())):
    segments.append(list(map(int, input().split())))

segments.sort(key=lambda x: x[1])

while len(segments) > 0:
    segment = segments[0]
    for segment_other in segments[1:]:
        if segment_other[0] <= segment[1] and segment[0] <= segment_other[1]:
            del segments[segments.index(segment_other)]

    result_points.append(str(segment[1]))
    del segments[segments.index(segment)]

print(len(result_points))
print(' '.join(result_points))
#4-2(Задача на программирование: непрерывный рюкзак)
n, W = map(lambda x: int(x), input().split())
result_price = 0
subjects = []

for i in range(n):
    c, w = map(lambda x: int(x), input().split())
    subjects.append([c, w])

subjects.sort(key=lambda x: -(x[0] / x[1]))


for subject in subjects:
    if subject[1] <= W:
        result_price += subject[0]
        W -= subject[1]

    elif 0 < W < subject[1]:
        result_price += subject[0] * (W / subject[1])
        W = 0

    if W == 0:
        break

print(result_price)
#4-3 (Задача на программирование: различные слагаемые)
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

int main() {
    int n, k;
    int summa = 0;
    cin >> n;
    vector <int> numbers;
    k = 0;
    while (summa != n){
        if (summa < n){
            k++;
            numbers.push_back(k);
        }else if (summa > n){
            numbers.erase(find(numbers.begin(), numbers.end() ,summa - n));
            break;
        }
        summa += k; 
    }
    cout << numbers.size() << endl;
    for (auto number: numbers){
        cout << number << ' ';
    }
}
