// Задача на программирование: наибольший общий делитель
#include <cassert>
#include <cstdint>
#include <iostream>

template <class Int>
Int gcd(Int a, Int b) {
    assert(a > 0 && b > 0);
    while (a > 0 && b > 0) {
        if (a > b) {
            a %= b;
        }
        else {
            b %= a;
        }
    }
    return a == 0 ? b : a;
}

int main(void) {
    std::int32_t a, b;
    std::cin >> a >> b;
    std::cout << gcd(a, b) << std::endl;
    return 0;
}
// Задача на программирование: последняя цифра большого числа Фибоначчи
#include <unordered_map>
#include <iostream>
#include <cassert>

class Fibonacci final {
public:
    static int get_last_digit(int n) {
        assert(n >= 1);
        static std::unordered_map < int, int > cache;
        cache[0] = 0;
        cache[1] = 1;
        for (int i = 2; i <= n; i++) {
            cache[i] = (cache[i - 2] + cache[i - 1]) % 10;
        }
        return cache[n];
    }
};

int main(void) {
    int n;
    std::cin >> n;
    std::cout << Fibonacci::get_last_digit(n) << std::endl;
    return 0;
}
// Задача на программирование: небольшое число Фибоначчи
#include <cassert>
#include <iostream>
#include <unordered_map>

class Fibonacci final {
public:
    static int get(int n) {
        assert(n >= 0);
        if (n == 0 || n == 1) {
            return n;
        }
        static std::unordered_map < int, int > cache;
        auto& result = cache[n];
        if (result == 0) {
            result = get(n - 2) + get(n - 1);
        }
        return result;
    }
};

int main(void) {
    int n;
    std::cin >> n;
    std::cout << Fibonacci::get(n) << std::endl;
    return 0;
}
